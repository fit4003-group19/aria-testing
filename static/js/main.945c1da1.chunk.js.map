{"version":3,"sources":["logo.svg","context/MapContext.js","components/Map.js","hooks/useTestCases.js","components/Controls.js","App.js","reportWebVitals.js","index.js"],"names":["MapContext","createContext","MapProvider","props","useState","mapPanZoom","setMapPanZoom","process","svgPath","setSvgPath","roomLabel","setRoomLabel","roomDescription","setRoomDescription","roomFlag","setRoomFlag","rootFocus","useRef","Provider","value","focusRoot","current","focus","children","svgPanZoom","require","Map","svgEl","useContext","classes","makeStyles","theme","map","flex","margin","border","svg","height","width","useStyles","className","handleKeys","onKeyEvent","src","onError","e","onLoad","foo","zoomEnabled","dblClickZoomEnabled","preventMouseEventsDefault","zoomAtPoint","x","y","innerRef","useTestCases","description","url","checked","testCases","setTestCases","attributes","display","flexDirection","backgroundColor","attribute","stroke","strokeWidth","buttons","justify","Controls","testCase","i","style","marginRight","color","ButtonGroup","size","variant","href","target","textDecoration","Button","onClick","j","onTestCaseClick","zoomIn","zoomOut","resetZoom","root","minHeight","App","flexBoxClasses","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.945c1da1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { createContext, useState, useRef } from \"react\";\r\n\r\n//create a context, with createContext api\r\nexport const MapContext = createContext();\r\n\r\nconst MapProvider = (props) => {\r\n  // this state will be shared with all components\r\n  const [mapPanZoom, setMapPanZoom] = useState();\r\n  const [svgPath, setSvgPath] = useState(\r\n    `${process.env.PUBLIC_URL}/svg/focus-test.svg`\r\n  );\r\n  const [roomLabel, setRoomLabel] = useState();\r\n  const [roomDescription, setRoomDescription] = useState();\r\n  const [roomFlag, setRoomFlag] = useState();\r\n  const rootFocus = useRef(null);\r\n\r\n  const focusRoot = () => {\r\n    if (rootFocus.current) {\r\n      rootFocus.current.focus();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <MapContext.Provider\r\n      value={{\r\n        mapPanZoom,\r\n        setMapPanZoom,\r\n        rootFocus,\r\n        focusRoot,\r\n        roomLabel,\r\n        setRoomLabel,\r\n        roomDescription,\r\n        setRoomDescription,\r\n        roomFlag,\r\n        setRoomFlag,\r\n        svgPath,\r\n        setSvgPath,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </MapContext.Provider>\r\n  );\r\n};\r\n\r\nexport default MapProvider;\r\n","import { makeStyles } from \"@material-ui/styles\";\r\nimport React, { useRef, useContext, useEffect } from \"react\";\r\nimport { MapContext } from \"../context/MapContext\";\r\nimport SVG from \"react-inlinesvg\";\r\nimport KeyboardEventHandler from \"react-keyboard-event-handler\";\r\nconst svgPanZoom = require(\"svg-pan-zoom\");\r\n\r\nfunction Map() {\r\n  // useRef References\r\n  const svgEl = useRef(null);\r\n  const {\r\n    mapPanZoom,\r\n    setMapPanZoom,\r\n    focusRoot,\r\n    setRoomLabel,\r\n    setRoomDescription,\r\n    setRoomFlag,\r\n    svgPath,\r\n  } = useContext(MapContext);\r\n\r\n  // CSS\r\n  const useStyles = makeStyles((theme) => ({\r\n    map: {\r\n      flex: 3,\r\n      margin: 10,\r\n      border: \"8px black\",\r\n    },\r\n    svg: {\r\n      height: \"100%\",\r\n      width: \"100%\",\r\n    },\r\n  }));\r\n\r\n  // Placeholder\r\n  const onError = (e) => {};\r\n\r\n  // Placeholder\r\n  const onLoad = (e) => {\r\n    // Initialize SVG Pan Zoom\r\n    const foo = svgPanZoom(svgEl.current, {\r\n      zoomEnabled: true,\r\n      dblClickZoomEnabled: false,\r\n      preventMouseEventsDefault: false,\r\n      // controlIconsEnabled: false,\r\n    });\r\n    foo.zoomAtPoint(1, { x: 447, y: 183 });\r\n    setMapPanZoom(foo);\r\n  };\r\n\r\n  // According to W3C draft, the focus event is fired AFTER the previous element has fired the blur event\r\n  // ****** Focus + Blur Fuctions (START) ******\r\n  const onLayerFocus = (e) => {\r\n    const layer = e.target;\r\n    const { layerFlag } = layer.dataset;\r\n    const roomLabelledBy = layer.getAttribute(\"aria-labelledby\");\r\n    const roomDescribedBy = layer.getAttribute(\"aria-describedby\");\r\n    const roomLabel = svgEl.current.getElementById(roomLabelledBy).textContent;\r\n    const roomDescription =\r\n      svgEl.current.getElementById(roomDescribedBy).textContent;\r\n    setRoomLabel(roomLabel);\r\n    setRoomDescription(roomDescription);\r\n    setRoomFlag(layerFlag);\r\n  };\r\n\r\n  const onLayerBlur = (e) => {\r\n    setRoomLabel(null);\r\n    setRoomDescription(null);\r\n    setRoomFlag(null);\r\n  };\r\n  // ****** Focus + Blur Fuctions (END) ******\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <KeyboardEventHandler\r\n      className={classes.map}\r\n      handleKeys={[\"esc\"]}\r\n      onKeyEvent={focusRoot}\r\n    >\r\n      <SVG\r\n        className={classes.svg}\r\n        src={svgPath}\r\n        onError={onError}\r\n        onLoad={onLoad}\r\n        innerRef={svgEl}\r\n      />\r\n    </KeyboardEventHandler>\r\n  );\r\n}\r\n\r\nexport default Map;\r\n","import { useState } from \"react\";\r\nconst useTestCases = () => {\r\n  const [testCases, setTestCases] = useState([\r\n    {\r\n      description: \"aria-labelledby, aria-describedby\",\r\n      url: `${process.env.PUBLIC_URL}/test_cases/0001.svg`,\r\n      checked: false,\r\n    },\r\n    {\r\n      description: \"aria-label, aria-describedby\",\r\n      url: `${process.env.PUBLIC_URL}/test_cases/0002.svg`,\r\n      checked: false,\r\n    },\r\n  ]);\r\n\r\n  return { testCases, setTestCases };\r\n};\r\n\r\nexport default useTestCases;\r\n","import React, { useContext, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { MapContext } from \"../context/MapContext\";\r\nimport useTestCases from \"../hooks/useTestCases\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport { ButtonGroup } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  attributes: {\r\n    flex: 1,\r\n    margin: 10,\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    backgroundColor: \"whitesmoke\",\r\n  },\r\n  attribute: { flex: 4, margin: 10, stroke: \"black\", strokeWidth: 5 },\r\n  buttons: {\r\n    flex: 1,\r\n    margin: 10,\r\n    display: \"flex\",\r\n    justify: \"space-between\",\r\n    flexDirection: \"row\",\r\n  },\r\n}));\r\n\r\nfunction Controls() {\r\n  const classes = useStyles();\r\n  const { mapPanZoom, setSvgPath } = useContext(MapContext);\r\n  const { testCases, setTestCases } = useTestCases();\r\n\r\n  const onTestCaseClick = (i) => {\r\n    setTestCases(\r\n      testCases.map((testCase, j) => {\r\n        return {\r\n          ...testCase,\r\n          checked: i == j ? true : false,\r\n        };\r\n      })\r\n    );\r\n    setSvgPath(testCases[i].url);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.attributes}>\r\n      <div className={classes.attribute}>\r\n        <h1>Testing Harness</h1>\r\n        {testCases.map((testCase, i) => {\r\n          return (\r\n            <>\r\n              <div>\r\n                <span\r\n                  style={{\r\n                    marginRight: \"1rem\",\r\n                    color: testCase.checked ? \"red\" : \"black\",\r\n                  }}\r\n                >\r\n                  {testCase.description}\r\n                </span>\r\n                <ButtonGroup\r\n                  size=\"small\"\r\n                  aria-label=\"small button group\"\r\n                  variant=\"contained\"\r\n                >\r\n                  <a\r\n                    href={testCase.url}\r\n                    target=\"_blank\"\r\n                    style={{ textDecoration: \"none\" }}\r\n                  >\r\n                    <Button>RAW SVG</Button>\r\n                  </a>\r\n                  <Button onClick={() => onTestCaseClick(i)}>Change</Button>\r\n                </ButtonGroup>\r\n              </div>\r\n            </>\r\n          );\r\n        })}\r\n      </div>\r\n      <div className={classes.buttons}>\r\n        {mapPanZoom && (\r\n          <>\r\n            <label>\r\n              Zoom In\r\n              <button onClick={() => mapPanZoom.zoomIn()}>+</button>\r\n            </label>\r\n            <label>\r\n              Zoom Out\r\n              <button onClick={() => mapPanZoom.zoomOut()}>-</button>\r\n            </label>\r\n            <label>\r\n              Reset\r\n              <button onClick={() => mapPanZoom.resetZoom()}>x</button>\r\n            </label>\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Controls;\r\n","import React, { useRef, useState } from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Map from \"./components/Map\";\r\nimport Controls from \"./components/Controls\";\r\nimport MapProvider from \"./context/MapContext\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    minHeight: \"90vh\",\r\n    width: \"100%\",\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n  },\r\n}));\r\n\r\nfunction App() {\r\n  const classes = useStyles();\r\n  const flexBoxClasses = useStyles();\r\n\r\n  return (\r\n    <MapProvider>\r\n      <div className={flexBoxClasses.root}>\r\n        <Map />\r\n        <Controls />\r\n      </div>\r\n    </MapProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}